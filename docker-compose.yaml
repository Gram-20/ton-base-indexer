version: '3.5'
services:
  forward_indexer:
    build:
      context: .
      dockerfile: deploy/indexer.Dockerfile
    command: --concurrency ${TON_INDEXER_FORWARD_WORKERS_COUNT:-2} -Q forward_queue
    restart: unless-stopped
    logging:
      &logging
      driver: json-file
      options:
        max-file: "5"
        max-size: "50m"
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      REDIS_HOST: redis
      REDIS_PORT: 6379
      USE_GET_BLOCK_TRANSACTIONS_EXT: ${TON_INDEXER_USE_GET_BLOCK_TRANSACTIONS_EXT:-0}
      LITESERVER_INDEX: ${LITESERVER_INDEX_FORWARD:-0}
      LITESERVER_CONFIG: ${LITESERVER_CONFIG:-/run/secrets/tonlib_config}
      CDLL_PATH: ${CDLL_PATH:-./config/libtonlibjson.so.0.5}
    secrets:
      - postgres_password
      - tonlib_config
    depends_on:
      &common-depends-on
      rabbitmq:
        condition: service_started
      redis:
        condition: service_started
      postgres:
        condition: service_healthy
  forward_scheduler:
    build:
      context: .
      dockerfile: deploy/scheduler.Dockerfile
    command: forward forward_queue
    restart: unless-stopped
    logging: *logging
    environment:
      START_SEQNO: ${TON_INDEXER_START_SEQNO:?start masterchain seqno is required}
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      REDIS_HOST: redis
      REDIS_PORT: 6379
      WORKERS_COUNT: ${TON_INDEXER_FORWARD_WORKERS_COUNT:-2}
    secrets:
      - postgres_password
    depends_on:
      <<: *common-depends-on
      forward_indexer:
        condition: service_started
  rabbitmq:
    image: rabbitmq
    restart: unless-stopped
  redis:
    image: redis:latest
    restart: unless-stopped
  postgres:
    image: postgres
    restart: unless-stopped
    shm_size: 1gb
    environment: 
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
    ports:
      - 5432:5432
    secrets:
      - postgres_password
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
secrets:
  postgres_password:
    file: private/postgres_password
  tonlib_config:
    file: ${TON_INDEXER_LITE_SERVER_CONFIG:?liteserver config file is required}
networks:
  indexer:
    name: indexer_net 
